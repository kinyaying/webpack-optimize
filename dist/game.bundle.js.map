{"version":3,"file":"game.bundle.js","sources":["webpack://learn-webpack-optimize/./src/game.js"],"sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './game.css'\n\nfunction Square(props) {\n  return (\n    <button\n      className={`square ${props.winnerSquare && 'winner-square'}`}\n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  )\n}\nfunction Board(props) {\n  const renderSquare = (i) => {\n    const { lines } = props\n    return (\n      <Square\n        winnerSquare={lines ? lines.includes(i) : null}\n        value={props.squares[i]}\n        onClick={() => {\n          props.onClick(i)\n        }}\n      />\n    )\n  }\n  const renderSquares = () => {\n    let doms = [],\n      rows = []\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        rows.push(\n          <React.Fragment key={i * 3 + j}>\n            {renderSquare(i * 3 + j)}\n          </React.Fragment>\n        )\n      }\n      doms.push(\n        <div className=\"board-row\" key={`row_${i}`}>\n          {rows}\n        </div>\n      )\n      rows = []\n    }\n    return doms\n  }\n  return (\n    <div>\n      <div className=\"status\">{status}</div>\n      {renderSquares()}\n    </div>\n  )\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n          row: null,\n          column: null,\n        },\n      ],\n      xIsNext: true,\n      stepNumber: 0,\n    }\n  }\n  handleClick = (i) => {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1)\n    const current = history[this.state.stepNumber]\n    const squares = current.squares.slice()\n    const row = i % 3\n    const column = parseInt(i / 3)\n    this.state.history.slice(0, this.state.stepNumber + 1)\n    if (calculateWinner(squares).winner || squares[i]) {\n      return\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O'\n    this.setState({\n      history: history.concat([{ squares, row, column }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length,\n    })\n  }\n  jumpTo(stepNumber) {\n    this.setState({ stepNumber, xIsNext: stepNumber % 2 === 0 })\n  }\n  render() {\n    const history = this.state.history\n    const current = history[this.state.stepNumber]\n    const { winner, lines } = calculateWinner(current.squares)\n    let status\n    if (winner) {\n      status = `Winner is ${winner}`\n    } else {\n      status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`\n    }\n    if (!winner && current.squares.indexOf(null) === -1) {\n      status = `平局啦`\n    }\n    const moves = history.map((step, move) => {\n      const desc = move\n        ? 'Go to move #' + move + ':row-' + step.row + ',column-' + step.column\n        : 'Go to fame start'\n      return (\n        <li\n          key={move}\n          className={this.state.stepNumber === move ? 'selected-history' : null}\n        >\n          <button\n            onClick={() => {\n              this.jumpTo(move)\n            }}\n          >\n            {desc}\n          </button>\n        </li>\n      )\n    })\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            lines={lines}\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    )\n  }\n}\n\n// ========================================\n\n// ReactDOM.render(<Game />, document.getElementById('root'))\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ]\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i]\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner: squares[a],\n        lines: lines[i],\n      }\n    }\n  }\n  return {\n    winner: null,\n    lines: null,\n  }\n}\n\nexport default Game\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAOA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAIA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAeA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAHA;AAKA;AACA;AA9BA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AATA;AAFA;AAaA;AACA;;;AAkBA;AACA;AAAA;AAAA;AAAA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AAHA;AASA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AAAA;AAMA;;;;AApFA;AAyFA;AACA;AACA;AAAA;AACA;AACA;AASA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;A;;A","sourceRoot":""}